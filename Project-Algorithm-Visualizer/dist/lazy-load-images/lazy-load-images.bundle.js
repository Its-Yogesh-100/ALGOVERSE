!function(){"use strict";var n,r,t,e,i,A={119:function(n,r,t){var e=t(15),i=t.n(e),A=t(645),a=t.n(A)()(i());a.push([n.id,"/* HEART */\r\n.lds-heart {\r\n  display: inline-block;\r\n  position: relative;\r\n  width: 160px;\r\n  height: 160px;\r\n  transform: rotate(45deg);\r\n  transform-origin: 80px 80px;\r\n}\r\n.lds-heart div {\r\n  top: 64px;\r\n  left: 64px;\r\n  position: absolute;\r\n  width: 64px;\r\n  height: 64px;\r\n  background: #f196ae;\r\n  animation: lds-heart 1.2s infinite cubic-bezier(0.215, 0.61, 0.355, 1);\r\n}\r\n.lds-heart div:after,\r\n.lds-heart div:before {\r\n  content: ' ';\r\n  position: absolute;\r\n  display: block;\r\n  width: 64px;\r\n  height: 64px;\r\n  background: #f196ae;\r\n}\r\n.lds-heart div:before {\r\n  left: -48px;\r\n  border-radius: 50% 0 0 50%;\r\n}\r\n.lds-heart div:after {\r\n  top: -48px;\r\n  border-radius: 50% 50% 0 0;\r\n}\r\n@keyframes lds-heart {\r\n  0% {\r\n    transform: scale(0.95);\r\n  }\r\n  5% {\r\n    transform: scale(1.1);\r\n  }\r\n  39% {\r\n    transform: scale(0.85);\r\n  }\r\n  45% {\r\n    transform: scale(1);\r\n  }\r\n  60% {\r\n    transform: scale(0.95);\r\n  }\r\n  100% {\r\n    transform: scale(0.9);\r\n  }\r\n}\r\n\r\n/* GRID */\r\n\r\n.lds-grid {\r\n  display: inline-block;\r\n  position: relative;\r\n  width: 120px;\r\n  height: 120px;\r\n}\r\n.lds-grid div {\r\n  position: absolute;\r\n  width: 32px;\r\n  height: 32px;\r\n  border-radius: 50%;\r\n  background: #cef;\r\n  animation: lds-grid 1.2s linear infinite;\r\n}\r\n.lds-grid div:nth-child(1) {\r\n  top: 8px;\r\n  left: 8px;\r\n  animation-delay: 0s;\r\n}\r\n.lds-grid div:nth-child(2) {\r\n  top: 8px;\r\n  left: 48px;\r\n  animation-delay: -0.4s;\r\n}\r\n.lds-grid div:nth-child(3) {\r\n  top: 8px;\r\n  left: 88px;\r\n  animation-delay: -0.8s;\r\n}\r\n.lds-grid div:nth-child(4) {\r\n  top: 48px;\r\n  left: 8px;\r\n  animation-delay: -0.4s;\r\n}\r\n.lds-grid div:nth-child(5) {\r\n  top: 48px;\r\n  left: 48px;\r\n  animation-delay: -0.8s;\r\n}\r\n.lds-grid div:nth-child(6) {\r\n  top: 48px;\r\n  left: 88px;\r\n  animation-delay: -1.2s;\r\n}\r\n.lds-grid div:nth-child(7) {\r\n  top: 88px;\r\n  left: 8px;\r\n  animation-delay: -0.8s;\r\n}\r\n.lds-grid div:nth-child(8) {\r\n  top: 88px;\r\n  left: 48px;\r\n  animation-delay: -1.2s;\r\n}\r\n.lds-grid div:nth-child(9) {\r\n  top: 88px;\r\n  left: 88px;\r\n  animation-delay: -1.6s;\r\n}\r\n@keyframes lds-grid {\r\n  0%,\r\n  100% {\r\n    opacity: 1;\r\n  }\r\n  50% {\r\n    opacity: 0.5;\r\n  }\r\n}\r\n\r\n/* Ripple */\r\n\r\n.lds-ripple {\r\n  display: inline-block;\r\n  position: relative;\r\n  width: 144px;\r\n  height: 144px;\r\n}\r\n.lds-ripple div {\r\n  position: absolute;\r\n  border: 8px solid #f196ae;\r\n  opacity: 1;\r\n  border-radius: 50%;\r\n  animation: lds-ripple 1s cubic-bezier(0, 0.2, 0.8, 1) infinite;\r\n}\r\n.lds-ripple div:nth-child(2) {\r\n  animation-delay: -0.5s;\r\n}\r\n@keyframes lds-ripple {\r\n  0% {\r\n    top: 72px;\r\n    left: 72px;\r\n    width: 0;\r\n    height: 0;\r\n    opacity: 1;\r\n  }\r\n  100% {\r\n    top: 0px;\r\n    left: 0px;\r\n    width: 144px;\r\n    height: 144px;\r\n    opacity: 0;\r\n  }\r\n}\r\n","",{version:3,sources:["webpack://./src/projects/lazy-load-images/loaders.css"],names:[],mappings:"AAAA,UAAU;AACV;EACE,qBAAqB;EACrB,kBAAkB;EAClB,YAAY;EACZ,aAAa;EACb,wBAAwB;EACxB,2BAA2B;AAC7B;AACA;EACE,SAAS;EACT,UAAU;EACV,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,mBAAmB;EACnB,sEAAsE;AACxE;AACA;;EAEE,YAAY;EACZ,kBAAkB;EAClB,cAAc;EACd,WAAW;EACX,YAAY;EACZ,mBAAmB;AACrB;AACA;EACE,WAAW;EACX,0BAA0B;AAC5B;AACA;EACE,UAAU;EACV,0BAA0B;AAC5B;AACA;EACE;IACE,sBAAsB;EACxB;EACA;IACE,qBAAqB;EACvB;EACA;IACE,sBAAsB;EACxB;EACA;IACE,mBAAmB;EACrB;EACA;IACE,sBAAsB;EACxB;EACA;IACE,qBAAqB;EACvB;AACF;;AAEA,SAAS;;AAET;EACE,qBAAqB;EACrB,kBAAkB;EAClB,YAAY;EACZ,aAAa;AACf;AACA;EACE,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,gBAAgB;EAChB,wCAAwC;AAC1C;AACA;EACE,QAAQ;EACR,SAAS;EACT,mBAAmB;AACrB;AACA;EACE,QAAQ;EACR,UAAU;EACV,sBAAsB;AACxB;AACA;EACE,QAAQ;EACR,UAAU;EACV,sBAAsB;AACxB;AACA;EACE,SAAS;EACT,SAAS;EACT,sBAAsB;AACxB;AACA;EACE,SAAS;EACT,UAAU;EACV,sBAAsB;AACxB;AACA;EACE,SAAS;EACT,UAAU;EACV,sBAAsB;AACxB;AACA;EACE,SAAS;EACT,SAAS;EACT,sBAAsB;AACxB;AACA;EACE,SAAS;EACT,UAAU;EACV,sBAAsB;AACxB;AACA;EACE,SAAS;EACT,UAAU;EACV,sBAAsB;AACxB;AACA;EACE;;IAEE,UAAU;EACZ;EACA;IACE,YAAY;EACd;AACF;;AAEA,WAAW;;AAEX;EACE,qBAAqB;EACrB,kBAAkB;EAClB,YAAY;EACZ,aAAa;AACf;AACA;EACE,kBAAkB;EAClB,yBAAyB;EACzB,UAAU;EACV,kBAAkB;EAClB,8DAA8D;AAChE;AACA;EACE,sBAAsB;AACxB;AACA;EACE;IACE,SAAS;IACT,UAAU;IACV,QAAQ;IACR,SAAS;IACT,UAAU;EACZ;EACA;IACE,QAAQ;IACR,SAAS;IACT,YAAY;IACZ,aAAa;IACb,UAAU;EACZ;AACF",sourcesContent:["/* HEART */\r\n.lds-heart {\r\n  display: inline-block;\r\n  position: relative;\r\n  width: 160px;\r\n  height: 160px;\r\n  transform: rotate(45deg);\r\n  transform-origin: 80px 80px;\r\n}\r\n.lds-heart div {\r\n  top: 64px;\r\n  left: 64px;\r\n  position: absolute;\r\n  width: 64px;\r\n  height: 64px;\r\n  background: #f196ae;\r\n  animation: lds-heart 1.2s infinite cubic-bezier(0.215, 0.61, 0.355, 1);\r\n}\r\n.lds-heart div:after,\r\n.lds-heart div:before {\r\n  content: ' ';\r\n  position: absolute;\r\n  display: block;\r\n  width: 64px;\r\n  height: 64px;\r\n  background: #f196ae;\r\n}\r\n.lds-heart div:before {\r\n  left: -48px;\r\n  border-radius: 50% 0 0 50%;\r\n}\r\n.lds-heart div:after {\r\n  top: -48px;\r\n  border-radius: 50% 50% 0 0;\r\n}\r\n@keyframes lds-heart {\r\n  0% {\r\n    transform: scale(0.95);\r\n  }\r\n  5% {\r\n    transform: scale(1.1);\r\n  }\r\n  39% {\r\n    transform: scale(0.85);\r\n  }\r\n  45% {\r\n    transform: scale(1);\r\n  }\r\n  60% {\r\n    transform: scale(0.95);\r\n  }\r\n  100% {\r\n    transform: scale(0.9);\r\n  }\r\n}\r\n\r\n/* GRID */\r\n\r\n.lds-grid {\r\n  display: inline-block;\r\n  position: relative;\r\n  width: 120px;\r\n  height: 120px;\r\n}\r\n.lds-grid div {\r\n  position: absolute;\r\n  width: 32px;\r\n  height: 32px;\r\n  border-radius: 50%;\r\n  background: #cef;\r\n  animation: lds-grid 1.2s linear infinite;\r\n}\r\n.lds-grid div:nth-child(1) {\r\n  top: 8px;\r\n  left: 8px;\r\n  animation-delay: 0s;\r\n}\r\n.lds-grid div:nth-child(2) {\r\n  top: 8px;\r\n  left: 48px;\r\n  animation-delay: -0.4s;\r\n}\r\n.lds-grid div:nth-child(3) {\r\n  top: 8px;\r\n  left: 88px;\r\n  animation-delay: -0.8s;\r\n}\r\n.lds-grid div:nth-child(4) {\r\n  top: 48px;\r\n  left: 8px;\r\n  animation-delay: -0.4s;\r\n}\r\n.lds-grid div:nth-child(5) {\r\n  top: 48px;\r\n  left: 48px;\r\n  animation-delay: -0.8s;\r\n}\r\n.lds-grid div:nth-child(6) {\r\n  top: 48px;\r\n  left: 88px;\r\n  animation-delay: -1.2s;\r\n}\r\n.lds-grid div:nth-child(7) {\r\n  top: 88px;\r\n  left: 8px;\r\n  animation-delay: -0.8s;\r\n}\r\n.lds-grid div:nth-child(8) {\r\n  top: 88px;\r\n  left: 48px;\r\n  animation-delay: -1.2s;\r\n}\r\n.lds-grid div:nth-child(9) {\r\n  top: 88px;\r\n  left: 88px;\r\n  animation-delay: -1.6s;\r\n}\r\n@keyframes lds-grid {\r\n  0%,\r\n  100% {\r\n    opacity: 1;\r\n  }\r\n  50% {\r\n    opacity: 0.5;\r\n  }\r\n}\r\n\r\n/* Ripple */\r\n\r\n.lds-ripple {\r\n  display: inline-block;\r\n  position: relative;\r\n  width: 144px;\r\n  height: 144px;\r\n}\r\n.lds-ripple div {\r\n  position: absolute;\r\n  border: 8px solid #f196ae;\r\n  opacity: 1;\r\n  border-radius: 50%;\r\n  animation: lds-ripple 1s cubic-bezier(0, 0.2, 0.8, 1) infinite;\r\n}\r\n.lds-ripple div:nth-child(2) {\r\n  animation-delay: -0.5s;\r\n}\r\n@keyframes lds-ripple {\r\n  0% {\r\n    top: 72px;\r\n    left: 72px;\r\n    width: 0;\r\n    height: 0;\r\n    opacity: 1;\r\n  }\r\n  100% {\r\n    top: 0px;\r\n    left: 0px;\r\n    width: 144px;\r\n    height: 144px;\r\n    opacity: 0;\r\n  }\r\n}\r\n"],sourceRoot:""}]),r.Z=a},414:function(n,r,t){var e=t(15),i=t.n(e),A=t(645),a=t.n(A),o=t(119),s=a()(i());s.i(o.Z),s.push([n.id,".app-container {\r\n  margin-top: 30px;\r\n}\r\n.app-container__heading {\r\n  margin: 20px auto 40px auto;\r\n}\r\n.app-container section {\r\n  height: 100vh;\r\n  padding: 30px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  min-height: 300px;\r\n}\r\n\r\n.app-container section:nth-child(even) {\r\n  background-color: #f1f1f1;\r\n  color: #333;\r\n}\r\n\r\n.app-container section:nth-child(odd) {\r\n  background-color: #333;\r\n  color: white;\r\n}\r\n\r\n.app-container section .card .card-body {\r\n  color: #333;\r\n}\r\n\r\n.app-container .card .card-img-top {\r\n  height: 160px;\r\n  object-fit: cover;\r\n}\r\n\r\n.app-container section .col-md-6 {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n@media all and (max-width: 767px) {\r\n  .app-container section .col-md-6 {\r\n    margin-bottom: 60px;\r\n  }\r\n}\r\n","",{version:3,sources:["webpack://./src/projects/lazy-load-images/styles.css"],names:[],mappings:"AACA;EACE,gBAAgB;AAClB;AACA;EACE,2BAA2B;AAC7B;AACA;EACE,aAAa;EACb,aAAa;EACb,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,iBAAiB;AACnB;;AAEA;EACE,yBAAyB;EACzB,WAAW;AACb;;AAEA;EACE,sBAAsB;EACtB,YAAY;AACd;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,aAAa;EACb,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,uBAAuB;AACzB;;AAEA;EACE;IACE,mBAAmB;EACrB;AACF",sourcesContent:["@import './loaders.css';\r\n.app-container {\r\n  margin-top: 30px;\r\n}\r\n.app-container__heading {\r\n  margin: 20px auto 40px auto;\r\n}\r\n.app-container section {\r\n  height: 100vh;\r\n  padding: 30px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  min-height: 300px;\r\n}\r\n\r\n.app-container section:nth-child(even) {\r\n  background-color: #f1f1f1;\r\n  color: #333;\r\n}\r\n\r\n.app-container section:nth-child(odd) {\r\n  background-color: #333;\r\n  color: white;\r\n}\r\n\r\n.app-container section .card .card-body {\r\n  color: #333;\r\n}\r\n\r\n.app-container .card .card-img-top {\r\n  height: 160px;\r\n  object-fit: cover;\r\n}\r\n\r\n.app-container section .col-md-6 {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n@media all and (max-width: 767px) {\r\n  .app-container section .col-md-6 {\r\n    margin-bottom: 60px;\r\n  }\r\n}\r\n"],sourceRoot:""}]),r.Z=s},645:function(n){n.exports=function(n){var r=[];return r.toString=function(){return this.map((function(r){var t=n(r);return r[2]?"@media ".concat(r[2]," {").concat(t,"}"):t})).join("")},r.i=function(n,t,e){"string"==typeof n&&(n=[[null,n,""]]);var i={};if(e)for(var A=0;A<this.length;A++){var a=this[A][0];null!=a&&(i[a]=!0)}for(var o=0;o<n.length;o++){var s=[].concat(n[o]);e&&i[s[0]]||(t&&(s[2]?s[2]="".concat(t," and ").concat(s[2]):s[2]=t),r.push(s))}},r}},15:function(n){function r(n,r){(null==r||r>n.length)&&(r=n.length);for(var t=0,e=new Array(r);t<r;t++)e[t]=n[t];return e}n.exports=function(n){var t,e,i=(e=4,function(n){if(Array.isArray(n))return n}(t=n)||function(n,r){var t=n&&("undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"]);if(null!=t){var e,i,A=[],a=!0,o=!1;try{for(t=t.call(n);!(a=(e=t.next()).done)&&(A.push(e.value),!r||A.length!==r);a=!0);}catch(n){o=!0,i=n}finally{try{a||null==t.return||t.return()}finally{if(o)throw i}}return A}}(t,e)||function(n,t){if(n){if("string"==typeof n)return r(n,t);var e=Object.prototype.toString.call(n).slice(8,-1);return"Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e?Array.from(n):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?r(n,t):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),A=i[1],a=i[3];if(!a)return A;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),l="/*# ".concat(s," */"),d=a.sources.map((function(n){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(n," */")}));return[A].concat(d).concat([l]).join("\n")}return[A].join("\n")}},379:function(n,r,t){var e,i=function(){var n={};return function(r){if(void 0===n[r]){var t=document.querySelector(r);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}n[r]=t}return n[r]}}(),A=[];function a(n){for(var r=-1,t=0;t<A.length;t++)if(A[t].identifier===n){r=t;break}return r}function o(n,r){for(var t={},e=[],i=0;i<n.length;i++){var o=n[i],s=r.base?o[0]+r.base:o[0],l=t[s]||0,d="".concat(s," ").concat(l);t[s]=l+1;var c=a(d),p={css:o[1],media:o[2],sourceMap:o[3]};-1!==c?(A[c].references++,A[c].updater(p)):A.push({identifier:d,updater:h(p,r),references:1}),e.push(d)}return e}function s(n){var r=document.createElement("style"),e=n.attributes||{};if(void 0===e.nonce){var A=t.nc;A&&(e.nonce=A)}if(Object.keys(e).forEach((function(n){r.setAttribute(n,e[n])})),"function"==typeof n.insert)n.insert(r);else{var a=i(n.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(r)}return r}var l,d=(l=[],function(n,r){return l[n]=r,l.filter(Boolean).join("\n")});function c(n,r,t,e){var i=t?"":e.media?"@media ".concat(e.media," {").concat(e.css,"}"):e.css;if(n.styleSheet)n.styleSheet.cssText=d(r,i);else{var A=document.createTextNode(i),a=n.childNodes;a[r]&&n.removeChild(a[r]),a.length?n.insertBefore(A,a[r]):n.appendChild(A)}}function p(n,r,t){var e=t.css,i=t.media,A=t.sourceMap;if(i?n.setAttribute("media",i):n.removeAttribute("media"),A&&"undefined"!=typeof btoa&&(e+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(A))))," */")),n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}var f=null,u=0;function h(n,r){var t,e,i;if(r.singleton){var A=u++;t=f||(f=s(r)),e=c.bind(null,t,A,!1),i=c.bind(null,t,A,!0)}else t=s(r),e=p.bind(null,t,r),i=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)};return e(n),function(r){if(r){if(r.css===n.css&&r.media===n.media&&r.sourceMap===n.sourceMap)return;e(n=r)}else i()}}n.exports=function(n,r){(r=r||{}).singleton||"boolean"==typeof r.singleton||(r.singleton=(void 0===e&&(e=Boolean(window&&document&&document.all&&!window.atob)),e));var t=o(n=n||[],r);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var e=0;e<t.length;e++){var i=a(t[e]);A[i].references--}for(var s=o(n,r),l=0;l<t.length;l++){var d=a(t[l]);0===A[d].references&&(A[d].updater(),A.splice(d,1))}t=s}}}}},a={};function o(n){var r=a[n];if(void 0!==r)return r.exports;var t=a[n]={id:n,exports:{}};return A[n](t,t.exports,o),t.exports}o.n=function(n){var r=n&&n.__esModule?function(){return n.default}:function(){return n};return o.d(r,{a:r}),r},o.d=function(n,r){for(var t in r)o.o(r,t)&&!o.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:r[t]})},o.o=function(n,r){return Object.prototype.hasOwnProperty.call(n,r)},o.nc=void 0,n=o(379),r=o.n(n),t=o(414),e={insert:"head",singleton:!1},r()(t.Z,e),t.Z.locals,i=function(n){var r=120+n;return'\n    <div class="card" style="width: 18rem">\n      <img\n        loading="lazy"\n        data-src="https://picsum.photos/'.concat(120+n,"/").concat(r,'"\n        class="card-img-top lazyload"\n        alt="..."\n      />\n      <div class="card-body">\n        <h5 class="card-title">Card title</h5>\n        <p class="card-text">\n          Some quick example text to build on the card title and make up\n          the bulk of the card\'s content.\n        </p>\n        <a href="https://ahsanayaz.com" class="btn btn-primary">AhsanAyaz.com</a>\n      </div>\n    </div>\n  ')},console.log("JS is awesome!"),function(){for(var n=document.querySelector(".app-container").querySelectorAll("section"),r=0,t=n.length;r<t;++r){var e=n[r].querySelectorAll(".col-md-6");(r%2==0?e[1]:e[0]).innerHTML=i(r)}}(),function(){if("loading"in HTMLImageElement.prototype)for(var n=document.querySelectorAll("img[loading=lazy]"),r=0;r<n.length;r++){var t=n[r];t.src=t.dataset.src}else if(window.IntersectionObserver)for(var e=new IntersectionObserver((function(n,r){n.filter((function(n){return n.isIntersecting})).map((function(n){var t=n.target,e=t.getAttribute("data-src");e&&(t.src=e,r.unobserve(t))}))})),i=document.querySelectorAll("img[data-src]"),A=0;A<i.length;A++){var a=i[A];e.observe(a)}else{var o=document.createElement("script");o.src="http://afarkas.github.io/lazysizes/lazysizes.min.js",document.body.appendChild(o),console.log("Works in IE11")}}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF6eS1sb2FkLWltYWdlcy9sYXp5LWxvYWQtaW1hZ2VzLmJ1bmRsZS5qcyIsIm1hcHBpbmdzIjoibUNBR0lBLEVDc0JKLEUscURDdEJJQyxFLE1BQTBCLEdBQTRCLEtBRTFEQSxFQUF3QkMsS0FBSyxDQUFDQyxFQUFPQyxHQUFJLGcvRkFBaS9GLEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLHlEQUF5RCxNQUFRLEdBQUcsU0FBVywyMENBQTIwQyxlQUFpQixDQUFDLGkvRkFBaS9GLFdBQWEsTUFFLzlPLEssc0VDSElILEVBQTBCLElBQTRCLEtBQzFEQSxFQUF3QkksRUFBRSxLQUUxQkosRUFBd0JDLEtBQUssQ0FBQ0MsRUFBT0MsR0FBSSw2NEJBQTg0QixHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQyx3REFBd0QsTUFBUSxHQUFHLFNBQVcsMlVBQTJVLGVBQWlCLENBQUMsMDZCQUEwNkIsV0FBYSxNQUVwekUsSyxrQkNEQUQsRUFBT0csUUFBVSxTQUFVQyxHQUN6QixJQUFJQyxFQUFPLEdBdURYLE9BckRBQSxFQUFLQyxTQUFXLFdBQ2QsT0FBT0MsS0FBS0MsS0FBSSxTQUFVQyxHQUN4QixJQUFJQyxFQUFVTixFQUF1QkssR0FFckMsT0FBSUEsRUFBSyxHQUNBLFVBQVVFLE9BQU9GLEVBQUssR0FBSSxNQUFNRSxPQUFPRCxFQUFTLEtBR2xEQSxDQUNULElBQUdFLEtBQUssR0FDVixFQUlBUCxFQUFLSCxFQUFJLFNBQVVXLEVBQVNDLEVBQVlDLEdBQ2YsaUJBQVpGLElBRVRBLEVBQVUsQ0FBQyxDQUFDLEtBQU1BLEVBQVMsTUFHN0IsSUFBSUcsRUFBeUIsQ0FBQyxFQUU5QixHQUFJRCxFQUNGLElBQUssSUFBSWIsRUFBSSxFQUFHQSxFQUFJSyxLQUFLVSxPQUFRZixJQUFLLENBRXBDLElBQUlELEVBQUtNLEtBQUtMLEdBQUcsR0FFUCxNQUFORCxJQUNGZSxFQUF1QmYsSUFBTSxFQUVqQyxDQUdGLElBQUssSUFBSWlCLEVBQUssRUFBR0EsRUFBS0ws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T25CLEVBQUcsQ0FDbkQsSUFDTStKLEVBRFVGLEVBQVM3SixHQUNEOEosaUJBQWlCLGNBQ3BCOUosRUFBSSxHQUFNLEVBQUkrSixFQUFRLEdBQUtBLEVBQVEsSUFDM0NDLFVBQVlDLEVBQVNqSyxFQUNwQyxDQUNGLENBdUNFa0ssR0FyQytCLFdBQy9CLEdBQUksWUFBYUMsaUJBQWlCekgsVUFFaEMsSUFEQSxJQUFNMEgsRUFBU2hHLFNBQVMwRixpQkFBaUIscUJBQ2hDMUUsRUFBUSxFQUFHQSxFQUFRZ0YsRUFBT3JKLE9BQVFxRSxJQUFTLENBQ2xELElBQU1pRixFQUFVRCxFQUFPaEYsR0FDdkJpRixFQUFRQyxJQUFNRCxFQUFRRSxRQUFRRCxHQUNoQyxNQUNLLEdBQUloRyxPQUFPa0cscUJBZ0JoQixJQWZBLElBQU1DLEVBQVcsSUFBSUQsc0JBQXFCLFNBQUNFLEVBQVNELEdBQ2xEQyxFQUNHL0QsUUFBTyxTQUFDZ0UsR0FBSyxPQUFLQSxFQUFNQyxjQUFjLElBQ3RDdEssS0FBSSxTQUFDcUssR0FDSixJQUFNRSxFQUFRRixFQUFNekcsT0FDZDRHLEVBQWVELEVBQU1FLGFBQWEsWUFDbkNELElBR0xELEVBQU1QLElBQU1RLEVBQ1pMLEVBQVNPLFVBQVVILEdBQ3JCLEdBQ0osSUFFTVQsRUFBU2hHLFNBQVMwRixpQkFBaUIsaUJBQ2hDMUUsRUFBUSxFQUFHQSxFQUFRZ0YsRUFBT3JKLE9BQVFxRSxJQUFTLENBQ2xELElBQU15RixFQUFRVCxFQUFPaEYsR0FDckJxRixFQUFTUSxRQUFRSixFQUNuQixLQUNLLENBQ0wsSUFBTUssRUFBWTlHLFNBQVMwQixjQUFjLFVBQ3pDb0YsRUFBVVosSUFBTSxzREFDaEJsRyxTQUFTK0csS0FBSzVFLFlBQVkyRSxHQUMxQnZCLFFBQVFDLElBQUksZ0JBQ2QsQ0FDRixDQUtFd0IsRSIsInNvdXJjZXMiOlsid2VicGFjazovL2Z1bi13aXRoLWpzLy4vc3JjL3Byb2plY3RzL2xhenktbG9hZC1pbWFnZXMvc3R5bGVzLmNzcz84ODM5Iiwid2VicGFjazovL2Z1bi13aXRoLWpzLy4vc3JjL3Byb2plY3RzL2xhenktbG9hZC1pbWFnZXMvQ2FyZEl0ZW0uanMiLCJ3ZWJwYWNrOi8vZnVuLXdpdGgtanMvLi9zcmMvcHJvamVjdHMvbGF6eS1sb2FkLWltYWdlcy9sb2FkZXJzLmNzcyIsIndlYnBhY2s6Ly9mdW4td2l0aC1qcy8uL3NyYy9wcm9qZWN0cy9sYXp5LWxvYWQtaW1hZ2VzL3N0eWxlcy5jc3MiLCJ3ZWJwYWNrOi8vZnVuLXdpdGgtanMvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL2Z1bi13aXRoLWpzLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vZnVuLXdpdGgtanMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vZnVuLXdpdGgtanMvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vZnVuLXdpdGgtanMvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vZnVuLXdpdGgtanMvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2Z1bi13aXRoLWpzL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vZnVuLXdpdGgtanMvd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL2Z1bi13aXRoLWpzLy4vc3JjL3Byb2plY3RzL2xhenktbG9hZC1pbWFnZXMvc2NyaXB0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhcGkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgICAgICAgIGltcG9ydCBjb250ZW50IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGVzLmNzc1wiO1xuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsImNvbnN0IENhcmRJdGVtID0gKGluZGV4KSA9PiB7XHJcbiAgY29uc3QgaW1hZ2VCYXNlU2l6ZSA9IDEyMDtcclxuICBjb25zdCBpbWFnZUhlaWdodCA9IGltYWdlQmFzZVNpemUgKyBpbmRleDtcclxuICBjb25zdCBpbWFnZVdpZHRoID0gaW1hZ2VCYXNlU2l6ZSArIGluZGV4O1xyXG4gIC8vIFdlIGNhbiBldmVuIHJldHVybiBhIHN0cmluZyBidWlsdCB1c2luZyBhIHRlbXBsYXRlIGxpdGVyYWxcclxuICByZXR1cm4gYFxyXG4gICAgPGRpdiBjbGFzcz1cImNhcmRcIiBzdHlsZT1cIndpZHRoOiAxOHJlbVwiPlxyXG4gICAgICA8aW1nXHJcbiAgICAgICAgbG9hZGluZz1cImxhenlcIlxyXG4gICAgICAgIGRhdGEtc3JjPVwiaHR0cHM6Ly9waWNzdW0ucGhvdG9zLyR7aW1hZ2VXaWR0aH0vJHtpbWFnZUhlaWdodH1cIlxyXG4gICAgICAgIGNsYXNzPVwiY2FyZC1pbWctdG9wIGxhenlsb2FkXCJcclxuICAgICAgICBhbHQ9XCIuLi5cIlxyXG4gICAgICAvPlxyXG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XHJcbiAgICAgICAgPGg1IGNsYXNzPVwiY2FyZC10aXRsZVwiPkNhcmQgdGl0bGU8L2g1PlxyXG4gICAgICAgIDxwIGNsYXNzPVwiY2FyZC10ZXh0XCI+XHJcbiAgICAgICAgICBTb21lIHF1aWNrIGV4YW1wbGUgdGV4dCB0byBidWlsZCBvbiB0aGUgY2FyZCB0aXRsZSBhbmQgbWFrZSB1cFxyXG4gICAgICAgICAgdGhlIGJ1bGsgb2YgdGhlIGNhcmQncyBjb250ZW50LlxyXG4gICAgICAgIDwvcD5cclxuICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly9haHNhbmF5YXouY29tXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj5BaHNhbkF5YXouY29tPC9hPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gIGA7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDYXJkSXRlbTtcclxuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIvKiBIRUFSVCAqL1xcclxcbi5sZHMtaGVhcnQge1xcclxcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcclxcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgd2lkdGg6IDE2MHB4O1xcclxcbiAgaGVpZ2h0OiAxNjBweDtcXHJcXG4gIHRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcXHJcXG4gIHRyYW5zZm9ybS1vcmlnaW46IDgwcHggODBweDtcXHJcXG59XFxyXFxuLmxkcy1oZWFydCBkaXYge1xcclxcbiAgdG9wOiA2NHB4O1xcclxcbiAgbGVmdDogNjRweDtcXHJcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gIHdpZHRoOiA2NHB4O1xcclxcbiAgaGVpZ2h0OiA2NHB4O1xcclxcbiAgYmFja2dyb3VuZDogI2YxOTZhZTtcXHJcXG4gIGFuaW1hdGlvbjogbGRzLWhlYXJ0IDEuMnMgaW5maW5pdGUgY3ViaWMtYmV6aWVyKDAuMjE1LCAwLjYxLCAwLjM1NSwgMSk7XFxyXFxufVxcclxcbi5sZHMtaGVhcnQgZGl2OmFmdGVyLFxcclxcbi5sZHMtaGVhcnQgZGl2OmJlZm9yZSB7XFxyXFxuICBjb250ZW50OiAnICc7XFxyXFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICBkaXNwbGF5OiBibG9jaztcXHJcXG4gIHdpZHRoOiA2NHB4O1xcclxcbiAgaGVpZ2h0OiA2NHB4O1xcclxcbiAgYmFja2dyb3VuZDogI2YxOTZhZTtcXHJcXG59XFxyXFxuLmxkcy1oZWFydCBkaXY6YmVmb3JlIHtcXHJcXG4gIGxlZnQ6IC00OHB4O1xcclxcbiAgYm9yZGVyLXJhZGl1czogNTAlIDAgMCA1MCU7XFxyXFxufVxcclxcbi5sZHMtaGVhcnQgZGl2OmFmdGVyIHtcXHJcXG4gIHRvcDogLTQ4cHg7XFxyXFxuICBib3JkZXItcmFkaXVzOiA1MCUgNTAlIDAgMDtcXHJcXG59XFxyXFxuQGtleWZyYW1lcyBsZHMtaGVhcnQge1xcclxcbiAgMCUge1xcclxcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDAuOTUpO1xcclxcbiAgfVxcclxcbiAgNSUge1xcclxcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDEuMSk7XFxyXFxuICB9XFxyXFxuICAzOSUge1xcclxcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDAuODUpO1xcclxcbiAgfVxcclxcbiAgNDUlIHtcXHJcXG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcXHJcXG4gIH1cXHJcXG4gIDYwJSB7XFxyXFxuICAgIHRyYW5zZm9ybTogc2NhbGUoMC45NSk7XFxyXFxuICB9XFxyXFxuICAxMDAlIHtcXHJcXG4gICAgdHJhbnNmb3JtOiBzY2FsZSgwLjkpO1xcclxcbiAgfVxcclxcbn1cXHJcXG5cXHJcXG4vKiBHUklEICovXFxyXFxuXFxyXFxuLmxkcy1ncmlkIHtcXHJcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXHJcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gIHdpZHRoOiAxMjBweDtcXHJcXG4gIGhlaWdodDogMTIwcHg7XFxyXFxufVxcclxcbi5sZHMtZ3JpZCBkaXYge1xcclxcbiAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgd2lkdGg6IDMycHg7XFxyXFxuICBoZWlnaHQ6IDMycHg7XFxyXFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxyXFxuICBiYWNrZ3JvdW5kOiAjY2VmO1xcclxcbiAgYW5pbWF0aW9uOiBsZHMtZ3JpZCAxLjJzIGxpbmVhciBpbmZpbml0ZTtcXHJcXG59XFxyXFxuLmxkcy1ncmlkIGRpdjpudGgtY2hpbGQoMSkge1xcclxcbiAgdG9wOiA4cHg7XFxyXFxuICBsZWZ0OiA4cHg7XFxyXFxuICBhbmltYXRpb24tZGVsYXk6IDBzO1xcclxcbn1cXHJcXG4ubGRzLWdyaWQgZGl2Om50aC1jaGlsZCgyKSB7XFxyXFxuICB0b3A6IDhweDtcXHJcXG4gIGxlZnQ6IDQ4cHg7XFxyXFxuICBhbmltYXRpb24tZGVsYXk6IC0wLjRzO1xcclxcbn1cXHJcXG4ubGRzLWdyaWQgZGl2Om50aC1jaGlsZCgzKSB7XFxyXFxuICB0b3A6IDhweDtcXHJcXG4gIGxlZnQ6IDg4cHg7XFxyXFxuICBhbmltYXRpb24tZGVsYXk6IC0wLjhzO1xcclxcbn1cXHJcXG4ubGRzLWdyaWQgZGl2Om50aC1jaGlsZCg0KSB7XFxyXFxuICB0b3A6IDQ4cHg7XFxyXFxuICBsZWZ0OiA4cHg7XFxyXFxuICBhbmltYXRpb24tZGVsYXk6IC0wLjRzO1xcclxcbn1cXHJcXG4ubGRzLWdyaWQgZGl2Om50aC1jaGlsZCg1KSB7XFxyXFxuICB0b3A6IDQ4cHg7XFxyXFxuICBsZWZ0OiA0OHB4O1xcclxcbiAgYW5pbWF0aW9uLWRlbGF5OiAtMC44cztcXHJcXG59XFxyXFxuLmxkcy1ncmlkIGRpdjpudGgtY2hpbGQoNikge1xcclxcbiAgdG9wOiA0OHB4O1xcclxcbiAgbGVmdDogODhweDtcXHJcXG4gIGFuaW1hdGlvbi1kZWxheTogLTEuMnM7XFxyXFxufVxcclxcbi5sZHMtZ3JpZCBkaXY6bnRoLWNoaWxkKDcpIHtcXHJcXG4gIHRvcDogODhweDtcXHJcXG4gIGxlZnQ6IDhweDtcXHJcXG4gIGFuaW1hdGlvbi1kZWxheTogLTAuOHM7XFxyXFxufVxcclxcbi5sZHMtZ3JpZCBkaXY6bnRoLWNoaWxkKDgpIHtcXHJcXG4gIHRvcDogODhweDtcXHJcXG4gIGxlZnQ6IDQ4cHg7XFxyXFxuICBhbmltYXRpb24tZGVsYXk6IC0xLjJzO1xcclxcbn1cXHJcXG4ubGRzLWdyaWQgZGl2Om50aC1jaGlsZCg5KSB7XFxyXFxuICB0b3A6IDg4cHg7XFxyXFxuICBsZWZ0OiA4OHB4O1xcclxcbiAgYW5pbWF0aW9uLWRlbGF5OiAtMS42cztcXHJcXG59XFxyXFxuQGtleWZyYW1lcyBsZHMtZ3JpZCB7XFxyXFxuICAwJSxcXHJcXG4gIDEwMCUge1xcclxcbiAgICBvcGFjaXR5OiAxO1xcclxcbiAgfVxcclxcbiAgNTAlIHtcXHJcXG4gICAgb3BhY2l0eTogMC41O1xcclxcbiAgfVxcclxcbn1cXHJcXG5cXHJcXG4vKiBSaXBwbGUgKi9cXHJcXG5cXHJcXG4ubGRzLXJpcHBsZSB7XFxyXFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxyXFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICB3aWR0aDogMTQ0cHg7XFxyXFxuICBoZWlnaHQ6IDE0NHB4O1xcclxcbn1cXHJcXG4ubGRzLXJpcHBsZSBkaXYge1xcclxcbiAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgYm9yZGVyOiA4cHggc29saWQgI2YxOTZhZTtcXHJcXG4gIG9wYWNpdHk6IDE7XFxyXFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxyXFxuICBhbmltYXRpb246IGxkcy1yaXBwbGUgMXMgY3ViaWMtYmV6aWVyKDAsIDAuMiwgMC44LCAxKSBpbmZpbml0ZTtcXHJcXG59XFxyXFxuLmxkcy1yaXBwbGUgZGl2Om50aC1jaGlsZCgyKSB7XFxyXFxuICBhbmltYXRpb24tZGVsYXk6IC0wLjVzO1xcclxcbn1cXHJcXG5Aa2V5ZnJhbWVzIGxkcy1yaXBwbGUge1xcclxcbiAgMCUge1xcclxcbiAgICB0b3A6IDcycHg7XFxyXFxuICAgIGxlZnQ6IDcycHg7XFxyXFxuICAgIHdpZHRoOiAwO1xcclxcbiAgICBoZWlnaHQ6IDA7XFxyXFxuICAgIG9wYWNpdHk6IDE7XFxyXFxuICB9XFxyXFxuICAxMDAlIHtcXHJcXG4gICAgdG9wOiAwcHg7XFxyXFxuICAgIGxlZnQ6IDBweDtcXHJcXG4gICAgd2lkdGg6IDE0NHB4O1xcclxcbiAgICBoZWlnaHQ6IDE0NHB4O1xcclxcbiAgICBvcGFjaXR5OiAwO1xcclxcbiAgfVxcclxcbn1cXHJcXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvcHJvamVjdHMvbGF6eS1sb2FkLWltYWdlcy9sb2FkZXJzLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxVQUFVO0FBQ1Y7RUFDRSxxQkFBcUI7RUFDckIsa0JBQWtCO0VBQ2xCLFlBQVk7RUFDWixhQUFhO0VBQ2Isd0JBQXdCO0VBQ3hCLDJCQUEyQjtBQUM3QjtBQUNBO0VBQ0UsU0FBUztFQUNULFVBQVU7RUFDVixrQkFBa0I7RUFDbEIsV0FBVztFQUNYLFlBQVk7RUFDWixtQkFBbUI7RUFDbkIsc0VBQXNFO0FBQ3hFO0FBQ0E7O0VBRUUsWUFBWTtFQUNaLGtCQUFrQjtFQUNsQixjQUFjO0VBQ2QsV0FBVztFQUNYLFlBQVk7RUFDWixtQkFBbUI7QUFDckI7QUFDQTtFQUNFLFdBQVc7RUFDWCwwQkFBMEI7QUFDNUI7QUFDQTtFQUNFLFVBQVU7RUFDViwwQkFBMEI7QUFDNUI7QUFDQTtFQUNFO0lBQ0Usc0JBQXNCO0VBQ3hCO0VBQ0E7SUFDRSxxQkFBcUI7RUFDdkI7RUFDQTtJQUNFLHNCQUFzQjtFQUN4QjtFQUNBO0lBQ0UsbUJBQW1CO0VBQ3JCO0VBQ0E7SUFDRSxzQkFBc0I7RUFDeEI7RUFDQTtJQUNFLHFCQUFxQjtFQUN2QjtBQUNGOztBQUVBLFNBQVM7O0FBRVQ7RUFDRSxxQkFBcUI7RUFDckIsa0JBQWtCO0VBQ2xCLFlBQVk7RUFDWixhQUFhO0FBQ2Y7QUFDQTtFQUNFLGtCQUFrQjtFQUNsQixXQUFXO0VBQ1gsWUFBWTtFQUNaLGtCQUFrQjtFQUNsQixnQkFBZ0I7RUFDaEIsd0NBQXdDO0FBQzFDO0FBQ0E7RUFDRSxRQUFRO0VBQ1IsU0FBUztFQUNULG1CQUFtQjtBQUNyQjtBQUNBO0VBQ0UsUUFBUTtFQUNSLFVBQVU7RUFDVixzQkFBc0I7QUFDeEI7QUFDQTtFQUNFLFFBQVE7RUFDUixVQUFVO0VBQ1Ysc0JBQXNCO0FBQ3hCO0FBQ0E7RUFDRSxTQUFTO0VBQ1QsU0FBUztFQUNULHNCQUFzQjtBQUN4QjtBQUNBO0VBQ0UsU0FBUztFQUNULFVBQVU7RUFDVixzQkFBc0I7QUFDeEI7QUFDQTtFQUNFLFNBQVM7RUFDVCxVQUFVO0VBQ1Ysc0JBQXNCO0FBQ3hCO0FBQ0E7RUFDRSxTQUFTO0VBQ1QsU0FBUztFQUNULHNCQUFzQjtBQUN4QjtBQUNBO0VBQ0UsU0FBUztFQUNULFVBQVU7RUFDVixzQkFBc0I7QUFDeEI7QUFDQTtFQUNFLFNBQVM7RUFDVCxVQUFVO0VBQ1Ysc0JBQXNCO0FBQ3hCO0FBQ0E7RUFDRTs7SUFFRSxVQUFVO0VBQ1o7RUFDQTtJQUNFLFlBQVk7RUFDZDtBQUNGOztBQUVBLFdBQVc7O0FBRVg7RUFDRSxxQkFBcUI7RUFDckIsa0JBQWtCO0VBQ2xCLFlBQVk7RUFDWixhQUFhO0FBQ2Y7QUFDQTtFQUNFLGtCQUFrQjtFQUNsQix5QkFBeUI7RUFDekIsVUFBVTtFQUNWLGtCQUFrQjtFQUNsQiw4REFBOEQ7QUFDaEU7QUFDQTtFQUNFLHNCQUFzQjtBQUN4QjtBQUNBO0VBQ0U7SUFDRSxTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsVUFBVTtFQUNaO0VBQ0E7SUFDRSxRQUFRO0lBQ1IsU0FBUztJQUNULFlBQVk7SUFDWixhQUFhO0lBQ2IsVUFBVTtFQUNaO0FBQ0ZcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLyogSEVBUlQgKi9cXHJcXG4ubGRzLWhlYXJ0IHtcXHJcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXHJcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gIHdpZHRoOiAxNjBweDtcXHJcXG4gIGhlaWdodDogMTYwcHg7XFxyXFxuICB0cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZyk7XFxyXFxuICB0cmFuc2Zvcm0tb3JpZ2luOiA4MHB4IDgwcHg7XFxyXFxufVxcclxcbi5sZHMtaGVhcnQgZGl2IHtcXHJcXG4gIHRvcDogNjRweDtcXHJcXG4gIGxlZnQ6IDY0cHg7XFxyXFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICB3aWR0aDogNjRweDtcXHJcXG4gIGhlaWdodDogNjRweDtcXHJcXG4gIGJhY2tncm91bmQ6ICNmMTk2YWU7XFxyXFxuICBhbmltYXRpb246IGxkcy1oZWFydCAxLjJzIGluZmluaXRlIGN1YmljLWJlemllcigwLjIxNSwgMC42MSwgMC4zNTUsIDEpO1xcclxcbn1cXHJcXG4ubGRzLWhlYXJ0IGRpdjphZnRlcixcXHJcXG4ubGRzLWhlYXJ0IGRpdjpiZWZvcmUge1xcclxcbiAgY29udGVudDogJyAnO1xcclxcbiAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgZGlzcGxheTogYmxvY2s7XFxyXFxuICB3aWR0aDogNjRweDtcXHJcXG4gIGhlaWdodDogNjRweDtcXHJcXG4gIGJhY2tncm91bmQ6ICNmMTk2YWU7XFxyXFxufVxcclxcbi5sZHMtaGVhcnQgZGl2OmJlZm9yZSB7XFxyXFxuICBsZWZ0OiAtNDhweDtcXHJcXG4gIGJvcmRlci1yYWRpdXM6IDUwJSAwIDAgNTAlO1xcclxcbn1cXHJcXG4ubGRzLWhlYXJ0IGRpdjphZnRlciB7XFxyXFxuICB0b3A6IC00OHB4O1xcclxcbiAgYm9yZGVyLXJhZGl1czogNTAlIDUwJSAwIDA7XFxyXFxufVxcclxcbkBrZXlmcmFtZXMgbGRzLWhlYXJ0IHtcXHJcXG4gIDAlIHtcXHJcXG4gICAgdHJhbnNmb3JtOiBzY2FsZSgwLjk1KTtcXHJcXG4gIH1cXHJcXG4gIDUlIHtcXHJcXG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxLjEpO1xcclxcbiAgfVxcclxcbiAgMzklIHtcXHJcXG4gICAgdHJhbnNmb3JtOiBzY2FsZSgwLjg1KTtcXHJcXG4gIH1cXHJcXG4gIDQ1JSB7XFxyXFxuICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XFxyXFxuICB9XFxyXFxuICA2MCUge1xcclxcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDAuOTUpO1xcclxcbiAgfVxcclxcbiAgMTAwJSB7XFxyXFxuICAgIHRyYW5zZm9ybTogc2NhbGUoMC45KTtcXHJcXG4gIH1cXHJcXG59XFxyXFxuXFxyXFxuLyogR1JJRCAqL1xcclxcblxcclxcbi5sZHMtZ3JpZCB7XFxyXFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxyXFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICB3aWR0aDogMTIwcHg7XFxyXFxuICBoZWlnaHQ6IDEyMHB4O1xcclxcbn1cXHJcXG4ubGRzLWdyaWQgZGl2IHtcXHJcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gIHdpZHRoOiAzMnB4O1xcclxcbiAgaGVpZ2h0OiAzMnB4O1xcclxcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xcclxcbiAgYmFja2dyb3VuZDogI2NlZjtcXHJcXG4gIGFuaW1hdGlvbjogbGRzLWdyaWQgMS4ycyBsaW5lYXIgaW5maW5pdGU7XFxyXFxufVxcclxcbi5sZHMtZ3JpZCBkaXY6bnRoLWNoaWxkKDEpIHtcXHJcXG4gIHRvcDogOHB4O1xcclxcbiAgbGVmdDogOHB4O1xcclxcbiAgYW5pbWF0aW9uLWRlbGF5OiAwcztcXHJcXG59XFxyXFxuLmxkcy1ncmlkIGRpdjpudGgtY2hpbGQoMikge1xcclxcbiAgdG9wOiA4cHg7XFxyXFxuICBsZWZ0OiA0OHB4O1xcclxcbiAgYW5pbWF0aW9uLWRlbGF5OiAtMC40cztcXHJcXG59XFxyXFxuLmxkcy1ncmlkIGRpdjpudGgtY2hpbGQoMykge1xcclxcbiAgdG9wOiA4cHg7XFxyXFxuICBsZWZ0OiA4OHB4O1xcclxcbiAgYW5pbWF0aW9uLWRlbGF5OiAtMC44cztcXHJcXG59XFxyXFxuLmxkcy1ncmlkIGRpdjpudGgtY2hpbGQoNCkge1xcclxcbiAgdG9wOiA0OHB4O1xcclxcbiAgbGVmdDogOHB4O1xcclxcbiAgYW5pbWF0aW9uLWRlbGF5OiAtMC40cztcXHJcXG59XFxyXFxuLmxkcy1ncmlkIGRpdjpudGgtY2hpbGQoNSkge1xcclxcbiAgdG9wOiA0OHB4O1xcclxcbiAgbGVmdDogNDhweDtcXHJcXG4gIGFuaW1hdGlvbi1kZWxheTogLTAuOHM7XFxyXFxufVxcclxcbi5sZHMtZ3JpZCBkaXY6bnRoLWNoaWxkKDYpIHtcXHJcXG4gIHRvcDogNDhweDtcXHJcXG4gIGxlZnQ6IDg4cHg7XFxyXFxuICBhbmltYXRpb24tZGVsYXk6IC0xLjJzO1xcclxcbn1cXHJcXG4ubGRzLWdyaWQgZGl2Om50aC1jaGlsZCg3KSB7XFxyXFxuICB0b3A6IDg4cHg7XFxyXFxuICBsZWZ0OiA4cHg7XFxyXFxuICBhbmltYXRpb24tZGVsYXk6IC0wLjhzO1xcclxcbn1cXHJcXG4ubGRzLWdyaWQgZGl2Om50aC1jaGlsZCg4KSB7XFxyXFxuICB0b3A6IDg4cHg7XFxyXFxuICBsZWZ0OiA0OHB4O1xcclxcbiAgYW5pbWF0aW9uLWRlbGF5OiAtMS4ycztcXHJcXG59XFxyXFxuLmxkcy1ncmlkIGRpdjpudGgtY2hpbGQoOSkge1xcclxcbiAgdG9wOiA4OHB4O1xcclxcbiAgbGVmdDogODhweDtcXHJcXG4gIGFuaW1hdGlvbi1kZWxheTogLTEuNnM7XFxyXFxufVxcclxcbkBrZXlmcmFtZXMgbGRzLWdyaWQge1xcclxcbiAgMCUsXFxyXFxuICAxMDAlIHtcXHJcXG4gICAgb3BhY2l0eTogMTtcXHJcXG4gIH1cXHJcXG4gIDUwJSB7XFxyXFxuICAgIG9wYWNpdHk6IDAuNTtcXHJcXG4gIH1cXHJcXG59XFxyXFxuXFxyXFxuLyogUmlwcGxlICovXFxyXFxuXFxyXFxuLmxkcy1yaXBwbGUge1xcclxcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcclxcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgd2lkdGg6IDE0NHB4O1xcclxcbiAgaGVpZ2h0OiAxNDRweDtcXHJcXG59XFxyXFxuLmxkcy1yaXBwbGUgZGl2IHtcXHJcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gIGJvcmRlcjogOHB4IHNvbGlkICNmMTk2YWU7XFxyXFxuICBvcGFjaXR5OiAxO1xcclxcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xcclxcbiAgYW5pbWF0aW9uOiBsZHMtcmlwcGxlIDFzIGN1YmljLWJlemllcigwLCAwLjIsIDAuOCwgMSkgaW5maW5pdGU7XFxyXFxufVxcclxcbi5sZHMtcmlwcGxlIGRpdjpudGgtY2hpbGQoMikge1xcclxcbiAgYW5pbWF0aW9uLWRlbGF5OiAtMC41cztcXHJcXG59XFxyXFxuQGtleWZyYW1lcyBsZHMtcmlwcGxlIHtcXHJcXG4gIDAlIHtcXHJcXG4gICAgdG9wOiA3MnB4O1xcclxcbiAgICBsZWZ0OiA3MnB4O1xcclxcbiAgICB3aWR0aDogMDtcXHJcXG4gICAgaGVpZ2h0OiAwO1xcclxcbiAgICBvcGFjaXR5OiAxO1xcclxcbiAgfVxcclxcbiAgMTAwJSB7XFxyXFxuICAgIHRvcDogMHB4O1xcclxcbiAgICBsZWZ0OiAwcHg7XFxyXFxuICAgIHdpZHRoOiAxNDRweDtcXHJcXG4gICAgaGVpZ2h0OiAxNDRweDtcXHJcXG4gICAgb3BhY2l0eTogMDtcXHJcXG4gIH1cXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2xvYWRlcnMuY3NzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5pKF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuYXBwLWNvbnRhaW5lciB7XFxyXFxuICBtYXJnaW4tdG9wOiAzMHB4O1xcclxcbn1cXHJcXG4uYXBwLWNvbnRhaW5lcl9faGVhZGluZyB7XFxyXFxuICBtYXJnaW46IDIwcHggYXV0byA0MHB4IGF1dG87XFxyXFxufVxcclxcbi5hcHAtY29udGFpbmVyIHNlY3Rpb24ge1xcclxcbiAgaGVpZ2h0OiAxMDB2aDtcXHJcXG4gIHBhZGRpbmc6IDMwcHg7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgbWluLWhlaWdodDogMzAwcHg7XFxyXFxufVxcclxcblxcclxcbi5hcHAtY29udGFpbmVyIHNlY3Rpb246bnRoLWNoaWxkKGV2ZW4pIHtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmMWYxZjE7XFxyXFxuICBjb2xvcjogIzMzMztcXHJcXG59XFxyXFxuXFxyXFxuLmFwcC1jb250YWluZXIgc2VjdGlvbjpudGgtY2hpbGQob2RkKSB7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzMzO1xcclxcbiAgY29sb3I6IHdoaXRlO1xcclxcbn1cXHJcXG5cXHJcXG4uYXBwLWNvbnRhaW5lciBzZWN0aW9uIC5jYXJkIC5jYXJkLWJvZHkge1xcclxcbiAgY29sb3I6ICMzMzM7XFxyXFxufVxcclxcblxcclxcbi5hcHAtY29udGFpbmVyIC5jYXJkIC5jYXJkLWltZy10b3Age1xcclxcbiAgaGVpZ2h0OiAxNjBweDtcXHJcXG4gIG9iamVjdC1maXQ6IGNvdmVyO1xcclxcbn1cXHJcXG5cXHJcXG4uYXBwLWNvbnRhaW5lciBzZWN0aW9uIC5jb2wtbWQtNiB7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbn1cXHJcXG5cXHJcXG5AbWVkaWEgYWxsIGFuZCAobWF4LXdpZHRoOiA3NjdweCkge1xcclxcbiAgLmFwcC1jb250YWluZXIgc2VjdGlvbiAuY29sLW1kLTYge1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiA2MHB4O1xcclxcbiAgfVxcclxcbn1cXHJcXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvcHJvamVjdHMvbGF6eS1sb2FkLWltYWdlcy9zdHlsZXMuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUNBO0VBQ0UsZ0JBQWdCO0FBQ2xCO0FBQ0E7RUFDRSwyQkFBMkI7QUFDN0I7QUFDQTtFQUNFLGFBQWE7RUFDYixhQUFhO0VBQ2IsYUFBYTtFQUNiLHNCQUFzQjtFQUN0Qix1QkFBdUI7RUFDdkIsaUJBQWlCO0FBQ25COztBQUVBO0VBQ0UseUJBQXlCO0VBQ3pCLFdBQVc7QUFDYjs7QUFFQTtFQUNFLHNCQUFzQjtFQUN0QixZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxXQUFXO0FBQ2I7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsaUJBQWlCO0FBQ25COztBQUVBO0VBQ0UsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQix1QkFBdUI7QUFDekI7O0FBRUE7RUFDRTtJQUNFLG1CQUFtQjtFQUNyQjtBQUNGXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBpbXBvcnQgJy4vbG9hZGVycy5jc3MnO1xcclxcbi5hcHAtY29udGFpbmVyIHtcXHJcXG4gIG1hcmdpbi10b3A6IDMwcHg7XFxyXFxufVxcclxcbi5hcHAtY29udGFpbmVyX19oZWFkaW5nIHtcXHJcXG4gIG1hcmdpbjogMjBweCBhdXRvIDQwcHggYXV0bztcXHJcXG59XFxyXFxuLmFwcC1jb250YWluZXIgc2VjdGlvbiB7XFxyXFxuICBoZWlnaHQ6IDEwMHZoO1xcclxcbiAgcGFkZGluZzogMzBweDtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICBtaW4taGVpZ2h0OiAzMDBweDtcXHJcXG59XFxyXFxuXFxyXFxuLmFwcC1jb250YWluZXIgc2VjdGlvbjpudGgtY2hpbGQoZXZlbikge1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogI2YxZjFmMTtcXHJcXG4gIGNvbG9yOiAjMzMzO1xcclxcbn1cXHJcXG5cXHJcXG4uYXBwLWNvbnRhaW5lciBzZWN0aW9uOm50aC1jaGlsZChvZGQpIHtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICMzMzM7XFxyXFxuICBjb2xvcjogd2hpdGU7XFxyXFxufVxcclxcblxcclxcbi5hcHAtY29udGFpbmVyIHNlY3Rpb24gLmNhcmQgLmNhcmQtYm9keSB7XFxyXFxuICBjb2xvcjogIzMzMztcXHJcXG59XFxyXFxuXFxyXFxuLmFwcC1jb250YWluZXIgLmNhcmQgLmNhcmQtaW1nLXRvcCB7XFxyXFxuICBoZWlnaHQ6IDE2MHB4O1xcclxcbiAgb2JqZWN0LWZpdDogY292ZXI7XFxyXFxufVxcclxcblxcclxcbi5hcHAtY29udGFpbmVyIHNlY3Rpb24gLmNvbC1tZC02IHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcbkBtZWRpYSBhbGwgYW5kIChtYXgtd2lkdGg6IDc2N3B4KSB7XFxyXFxuICAuYXBwLWNvbnRhaW5lciBzZWN0aW9uIC5jb2wtbWQtNiB7XFxyXFxuICAgIG1hcmdpbi1ib3R0b206IDYwcHg7XFxyXFxuICB9XFxyXFxufVxcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5LCBkZWR1cGUpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2ldKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiXCIuY29uY2F0KG1lZGlhUXVlcnksIFwiIGFuZCBcIikuY29uY2F0KGl0ZW1bMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyB2YXIgX2kgPSBhcnIgJiYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgYXJyW1N5bWJvbC5pdGVyYXRvcl0gfHwgYXJyW1wiQEBpdGVyYXRvclwiXSk7IGlmIChfaSA9PSBudWxsKSByZXR1cm47IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX3MsIF9lOyB0cnkgeyBmb3IgKF9pID0gX2kuY2FsbChhcnIpOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKSB7XG4gIHZhciBfaXRlbSA9IF9zbGljZWRUb0FycmF5KGl0ZW0sIDQpLFxuICAgICAgY29udGVudCA9IF9pdGVtWzFdLFxuICAgICAgY3NzTWFwcGluZyA9IF9pdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgXCJcIikuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpc09sZElFID0gZnVuY3Rpb24gaXNPbGRJRSgpIHtcbiAgdmFyIG1lbW87XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSgpIHtcbiAgICBpZiAodHlwZW9mIG1lbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuICAgICAgLy8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuICAgICAgLy8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuICAgICAgLy8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG4gICAgICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcbiAgICAgIG1lbW8gPSBCb29sZWFuKHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn0oKTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uIGdldFRhcmdldCgpIHtcbiAgdmFyIG1lbW8gPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKHRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtb1t0YXJnZXRdO1xuICB9O1xufSgpO1xuXG52YXIgc3R5bGVzSW5Eb20gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRvbS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRvbVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdXG4gICAgfTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXNJbkRvbS5wdXNoKHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogYWRkU3R5bGUob2JqLCBvcHRpb25zKSxcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdmFyIGF0dHJpYnV0ZXMgPSBvcHRpb25zLmF0dHJpYnV0ZXMgfHwge307XG5cbiAgaWYgKHR5cGVvZiBhdHRyaWJ1dGVzLm5vbmNlID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgICBpZiAobm9uY2UpIHtcbiAgICAgIGF0dHJpYnV0ZXMubm9uY2UgPSBub25jZTtcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICB9KTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0aW9ucy5pbnNlcnQoc3R5bGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQob3B0aW9ucy5pbnNlcnQgfHwgJ2hlYWQnKTtcblxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICAgIH1cblxuICAgIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbnZhciByZXBsYWNlVGV4dCA9IGZ1bmN0aW9uIHJlcGxhY2VUZXh0KCkge1xuICB2YXIgdGV4dFN0b3JlID0gW107XG4gIHJldHVybiBmdW5jdGlvbiByZXBsYWNlKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcbiAgfTtcbn0oKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyhzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5tZWRpYSA/IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIikuY29uY2F0KG9iai5jc3MsIFwifVwiKSA6IG9iai5jc3M7IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG4gICAgdmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZSwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzO1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKCdtZWRpYScpO1xuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyIHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xuXG5mdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlO1xuICB2YXIgdXBkYXRlO1xuICB2YXIgcmVtb3ZlO1xuXG4gIGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuICAgIHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuICAgIHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUgPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZShvYmopO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuICAvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cbiAgaWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09ICdib29sZWFuJykge1xuICAgIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuICB9XG5cbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXdMaXN0KSAhPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRvbVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5Eb21bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5Eb20uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcblx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIG1vZHVsZTsgfTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIGRlZmluaXRpb24pIHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqLCBwcm9wKSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTsgfSIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiaW1wb3J0ICcuL3N0eWxlcy5jc3MnO1xyXG5pbXBvcnQgQ2FyZEl0ZW0gZnJvbSAnLi9DYXJkSXRlbSc7XHJcblxyXG5jb25zdCBnZW5lcmF0ZUltYWdlcyA9ICgpID0+IHtcclxuICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYXBwLWNvbnRhaW5lcicpO1xyXG4gIGNvbnN0IHNlY3Rpb25zID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJ3NlY3Rpb24nKTtcclxuICBmb3IgKGxldCBpID0gMCwgbGVuID0gc2VjdGlvbnMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcclxuICAgIGNvbnN0IHNlY3Rpb24gPSBzZWN0aW9uc1tpXTtcclxuICAgIGNvbnN0IGNvbHVtbnMgPSBzZWN0aW9uLnF1ZXJ5U2VsZWN0b3JBbGwoJy5jb2wtbWQtNicpO1xyXG4gICAgY29uc3QgdGFyZ2V0Q29sdW1uID0gaSAlIDIgPT09IDAgPyBjb2x1bW5zWzFdIDogY29sdW1uc1swXTtcclxuICAgIHRhcmdldENvbHVtbi5pbm5lckhUTUwgPSBDYXJkSXRlbShpKTtcclxuICB9XHJcbn07XHJcblxyXG5jb25zdCBpbWFnZUxhenlMb2FkaW5nRmFsbGJhY2sgPSAoKSA9PiB7XHJcbiAgaWYgKCdsb2FkaW5nJyBpbiBIVE1MSW1hZ2VFbGVtZW50LnByb3RvdHlwZSkge1xyXG4gICAgY29uc3QgaW1hZ2VzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaW1nW2xvYWRpbmc9bGF6eV0nKTtcclxuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBpbWFnZXMubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSBpbWFnZXNbaW5kZXhdO1xyXG4gICAgICBlbGVtZW50LnNyYyA9IGVsZW1lbnQuZGF0YXNldC5zcmM7XHJcbiAgICB9XHJcbiAgfSBlbHNlIGlmICh3aW5kb3cuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIpIHtcclxuICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKChlbnRyaWVzLCBvYnNlcnZlcikgPT4ge1xyXG4gICAgICBlbnRyaWVzXHJcbiAgICAgICAgLmZpbHRlcigoZW50cnkpID0+IGVudHJ5LmlzSW50ZXJzZWN0aW5nKVxyXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XHJcbiAgICAgICAgICBjb25zdCBpbWFnZSA9IGVudHJ5LnRhcmdldDtcclxuICAgICAgICAgIGNvbnN0IGRhdGFTcmNWYWx1ZSA9IGltYWdlLmdldEF0dHJpYnV0ZSgnZGF0YS1zcmMnKTtcclxuICAgICAgICAgIGlmICghZGF0YVNyY1ZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGltYWdlLnNyYyA9IGRhdGFTcmNWYWx1ZTtcclxuICAgICAgICAgIG9ic2VydmVyLnVub2JzZXJ2ZShpbWFnZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBpbWFnZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdpbWdbZGF0YS1zcmNdJyk7XHJcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgaW1hZ2VzLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICBjb25zdCBpbWFnZSA9IGltYWdlc1tpbmRleF07XHJcbiAgICAgIG9ic2VydmVyLm9ic2VydmUoaW1hZ2UpO1xyXG4gICAgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICBjb25zdCBzY3JpcHRUYWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcclxuICAgIHNjcmlwdFRhZy5zcmMgPSAnaHR0cDovL2FmYXJrYXMuZ2l0aHViLmlvL2xhenlzaXplcy9sYXp5c2l6ZXMubWluLmpzJztcclxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0VGFnKTtcclxuICAgIGNvbnNvbGUubG9nKCdXb3JrcyBpbiBJRTExJyk7XHJcbiAgfVxyXG59O1xyXG5cclxuY29uc3QgbWFpbiA9ICgpID0+IHtcclxuICBjb25zb2xlLmxvZygnSlMgaXMgYXdlc29tZSEnKTtcclxuICBnZW5lcmF0ZUltYWdlcygpO1xyXG4gIGltYWdlTGF6eUxvYWRpbmdGYWxsYmFjaygpO1xyXG59O1xyXG5cclxubWFpbigpO1xyXG4iXSwibmFtZXMiOlsib3B0aW9ucyIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiaSIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwiY29uY2F0Iiwiam9pbiIsIm1vZHVsZXMiLCJtZWRpYVF1ZXJ5IiwiZGVkdXBlIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImxlbmd0aCIsIl9pIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJhcnIiLCJsZW4iLCJhcnIyIiwiQXJyYXkiLCJfaXRlbSIsImlzQXJyYXkiLCJfYXJyYXlXaXRoSG9sZXMiLCJTeW1ib2wiLCJpdGVyYXRvciIsIl9zIiwiX2UiLCJfYXJyIiwiX24iLCJfZCIsImNhbGwiLCJuZXh0IiwiZG9uZSIsInZhbHVlIiwiZXJyIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwibyIsIm1pbkxlbiIsIm4iLCJPYmplY3QiLCJwcm90b3R5cGUiLCJzbGljZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsImZyb20iLCJ0ZXN0IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiVHlwZUVycm9yIiwiX25vbkl0ZXJhYmxlUmVzdCIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJtZW1vIiwiZ2V0VGFyZ2V0IiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwic3R5bGVzSW5Eb20iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleCIsIm9iaiIsImNzcyIsIm1lZGlhIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRTdHlsZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlIiwiY3JlYXRlRWxlbWVudCIsImF0dHJpYnV0ZXMiLCJub25jZSIsImtleXMiLCJmb3JFYWNoIiwia2V5Iiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJmaWx0ZXIiLCJCb29sZWFuIiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsInJlbW92ZSIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3NzTm9kZSIsImNyZWF0ZVRleHROb2RlIiwiY2hpbGROb2RlcyIsInJlbW92ZUNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwiYXBwbHlUb1RhZyIsInJlbW92ZUF0dHJpYnV0ZSIsImZpcnN0Q2hpbGQiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwidXBkYXRlIiwic3R5bGVJbmRleCIsImJpbmQiLCJwYXJlbnROb2RlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwibmV3T2JqIiwiYWxsIiwiYXRvYiIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaW5kZXgiLCJzcGxpY2UiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInByb3AiLCJoYXNPd25Qcm9wZXJ0eSIsIm5jIiwibG9jYWxzIiwiaW1hZ2VIZWlnaHQiLCJjb25zb2xlIiwibG9nIiwic2VjdGlvbnMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiY29sdW1ucyIsImlubmVySFRNTCIsIkNhcmRJdGVtIiwiZ2VuZXJhdGVJbWFnZXMiLCJIVE1MSW1hZ2VFbGVtZW50IiwiaW1hZ2VzIiwiZWxlbWVudCIsInNyYyIsImRhdGFzZXQiLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsIm9ic2VydmVyIiwiZW50cmllcyIsImVudHJ5IiwiaXNJbnRlcnNlY3RpbmciLCJpbWFnZSIsImRhdGFTcmNWYWx1ZSIsImdldEF0dHJpYnV0ZSIsInVub2JzZXJ2ZSIsIm9ic2VydmUiLCJzY3JpcHRUYWciLCJib2R5IiwiaW1hZ2VMYXp5TG9hZGluZ0ZhbGxiYWNrIl0sInNvdXJjZVJvb3QiOiIifQ==