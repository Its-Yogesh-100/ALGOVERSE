!function(){var n={255:function(){var n=function n(r){return 1===r||0===r?1:r*n(r-1)}(5);console.log(n)},496:function(n,r,t){"use strict";var e=t(15),a=t.n(e),o=t(645),i=t.n(o)()(a());i.push([n.id,".main-section {\r\n  margin-top: 20px;\r\n}\r\n\r\n#calcFactBtn {\r\n  margin-top: 10px;\r\n}\r\n\r\n.fact-list {\r\n  min-height: 300px;\r\n}\r\n\r\n.fact-list-item {\r\n  animation: nested-item-appear 0.3s ease-in;\r\n  text-align: center;\r\n  background-color: #fff;\r\n  border-radius: 4px;\r\n  box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;\r\n  padding: 20px 30px;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n@keyframes nested-item-appear {\r\n  0% {\r\n    transform: translateY(-100%) scale(0, 0);\r\n  }\r\n  50% {\r\n    transform: translateY(-50%) scale(0.5, 0.5);\r\n  }\r\n  100% {\r\n    position: relative;\r\n    transform: translateY(0) scale(1, 1);\r\n  }\r\n}\r\n\r\n@keyframes nested-item-disappear {\r\n  0% {\r\n    transform: translateY(0) scale(1, 1);\r\n  }\r\n  50% {\r\n    transform: translateY(-50%) scale(0.5, 0.5);\r\n  }\r\n  100% {\r\n    transform: translateY(-100%) scale(0, 0);\r\n    visibility: hidden;\r\n  }\r\n}\r\n","",{version:3,sources:["webpack://./src/projects/js-recursion/style.css"],names:[],mappings:"AAAA;EACE,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,0CAA0C;EAC1C,kBAAkB;EAClB,sBAAsB;EACtB,kBAAkB;EAClB,qDAAqD;EACrD,kBAAkB;EAClB,mBAAmB;AACrB;;AAEA;EACE;IACE,wCAAwC;EAC1C;EACA;IACE,2CAA2C;EAC7C;EACA;IACE,kBAAkB;IAClB,oCAAoC;EACtC;AACF;;AAEA;EACE;IACE,oCAAoC;EACtC;EACA;IACE,2CAA2C;EAC7C;EACA;IACE,wCAAwC;IACxC,kBAAkB;EACpB;AACF",sourcesContent:[".main-section {\r\n  margin-top: 20px;\r\n}\r\n\r\n#calcFactBtn {\r\n  margin-top: 10px;\r\n}\r\n\r\n.fact-list {\r\n  min-height: 300px;\r\n}\r\n\r\n.fact-list-item {\r\n  animation: nested-item-appear 0.3s ease-in;\r\n  text-align: center;\r\n  background-color: #fff;\r\n  border-radius: 4px;\r\n  box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;\r\n  padding: 20px 30px;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n@keyframes nested-item-appear {\r\n  0% {\r\n    transform: translateY(-100%) scale(0, 0);\r\n  }\r\n  50% {\r\n    transform: translateY(-50%) scale(0.5, 0.5);\r\n  }\r\n  100% {\r\n    position: relative;\r\n    transform: translateY(0) scale(1, 1);\r\n  }\r\n}\r\n\r\n@keyframes nested-item-disappear {\r\n  0% {\r\n    transform: translateY(0) scale(1, 1);\r\n  }\r\n  50% {\r\n    transform: translateY(-50%) scale(0.5, 0.5);\r\n  }\r\n  100% {\r\n    transform: translateY(-100%) scale(0, 0);\r\n    visibility: hidden;\r\n  }\r\n}\r\n"],sourceRoot:""}]),r.Z=i},738:function(n,r,t){"use strict";var e=t(15),a=t.n(e),o=t(645),i=t.n(o)()(a());i.push([n.id,"html,\r\nbody {\r\n  width: 100%;\r\n  height: 100%;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\nbody > main,\r\nbody > .main {\r\n  min-height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin: 40px auto;\r\n}\r\n\r\n* {\r\n  outline: none;\r\n}\r\n\r\n.app-container {\r\n  max-width: 600px;\r\n  margin: auto;\r\n  background-color: #f2f2f2;\r\n  padding: 30px;\r\n}\r\n\r\n.app-container h1 {\r\n  text-align: center;\r\n}\r\n\r\n.app-container .box_container {\r\n  flex-direction: column;\r\n  justify-content: flex-end;\r\n  display: flex;\r\n  height: 300px;\r\n  background-color: white;\r\n  max-width: 200px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.app-container .box {\r\n  overflow: auto;\r\n}\r\n\r\n.app-container .box .box_item {\r\n  border: 1px solid black;\r\n  padding: 4px 80px;\r\n  text-align: center;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.app-container .box .box_item.peeking {\r\n  background-color: #333;\r\n  color: white;\r\n}\r\n\r\n.app-container .buttons-container {\r\n  max-width: max-content;\r\n  margin: 30px auto 0 auto;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.icon::before {\r\n  display: inline-block;\r\n  font-style: normal;\r\n  font-variant: normal;\r\n  text-rendering: auto;\r\n  -webkit-font-smoothing: antialiased;\r\n}\r\n\r\n.icon.icon-arrow-right::before {\r\n  font-family: 'Font Awesome 5 Free', sans-serif;\r\n  font-weight: 900;\r\n  content: '\\f061';\r\n}\r\n\r\n.icon.icon-arrow-left::before {\r\n  font-family: 'Font Awesome 5 Free', sans-serif;\r\n  font-weight: 900;\r\n  content: '\\f060';\r\n}\r\n","",{version:3,sources:["webpack://./src/styles/globals.css"],names:[],mappings:"AAAA;;EAEE,WAAW;EACX,YAAY;EACZ,SAAS;EACT,UAAU;AACZ;;AAEA;;EAEE,gBAAgB;EAChB,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,iBAAiB;AACnB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,gBAAgB;EAChB,YAAY;EACZ,yBAAyB;EACzB,aAAa;AACf;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,sBAAsB;EACtB,yBAAyB;EACzB,aAAa;EACb,aAAa;EACb,uBAAuB;EACvB,gBAAgB;EAChB,cAAc;AAChB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,uBAAuB;EACvB,iBAAiB;EACjB,kBAAkB;EAClB,yBAAyB;AAC3B;;AAEA;EACE,sBAAsB;EACtB,YAAY;AACd;;AAEA;EACE,sBAAsB;EACtB,wBAAwB;EACxB,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,qBAAqB;EACrB,kBAAkB;EAClB,oBAAoB;EACpB,oBAAoB;EACpB,mCAAmC;AACrC;;AAEA;EACE,8CAA8C;EAC9C,gBAAgB;EAChB,gBAAgB;AAClB;;AAEA;EACE,8CAA8C;EAC9C,gBAAgB;EAChB,gBAAgB;AAClB",sourcesContent:["html,\r\nbody {\r\n  width: 100%;\r\n  height: 100%;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\nbody > main,\r\nbody > .main {\r\n  min-height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin: 40px auto;\r\n}\r\n\r\n* {\r\n  outline: none;\r\n}\r\n\r\n.app-container {\r\n  max-width: 600px;\r\n  margin: auto;\r\n  background-color: #f2f2f2;\r\n  padding: 30px;\r\n}\r\n\r\n.app-container h1 {\r\n  text-align: center;\r\n}\r\n\r\n.app-container .box_container {\r\n  flex-direction: column;\r\n  justify-content: flex-end;\r\n  display: flex;\r\n  height: 300px;\r\n  background-color: white;\r\n  max-width: 200px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.app-container .box {\r\n  overflow: auto;\r\n}\r\n\r\n.app-container .box .box_item {\r\n  border: 1px solid black;\r\n  padding: 4px 80px;\r\n  text-align: center;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.app-container .box .box_item.peeking {\r\n  background-color: #333;\r\n  color: white;\r\n}\r\n\r\n.app-container .buttons-container {\r\n  max-width: max-content;\r\n  margin: 30px auto 0 auto;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.icon::before {\r\n  display: inline-block;\r\n  font-style: normal;\r\n  font-variant: normal;\r\n  text-rendering: auto;\r\n  -webkit-font-smoothing: antialiased;\r\n}\r\n\r\n.icon.icon-arrow-right::before {\r\n  font-family: 'Font Awesome 5 Free', sans-serif;\r\n  font-weight: 900;\r\n  content: '\\f061';\r\n}\r\n\r\n.icon.icon-arrow-left::before {\r\n  font-family: 'Font Awesome 5 Free', sans-serif;\r\n  font-weight: 900;\r\n  content: '\\f060';\r\n}\r\n"],sourceRoot:""}]),r.Z=i},645:function(n){"use strict";n.exports=function(n){var r=[];return r.toString=function(){return this.map((function(r){var t=n(r);return r[2]?"@media ".concat(r[2]," {").concat(t,"}"):t})).join("")},r.i=function(n,t,e){"string"==typeof n&&(n=[[null,n,""]]);var a={};if(e)for(var o=0;o<this.length;o++){var i=this[o][0];null!=i&&(a[i]=!0)}for(var c=0;c<n.length;c++){var s=[].concat(n[c]);e&&a[s[0]]||(t&&(s[2]?s[2]="".concat(t," and ").concat(s[2]):s[2]=t),r.push(s))}},r}},15:function(n){"use strict";function r(n,r){(null==r||r>n.length)&&(r=n.length);for(var t=0,e=new Array(r);t<r;t++)e[t]=n[t];return e}n.exports=function(n){var t,e,a=(e=4,function(n){if(Array.isArray(n))return n}(t=n)||function(n,r){var t=n&&("undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"]);if(null!=t){var e,a,o=[],i=!0,c=!1;try{for(t=t.call(n);!(i=(e=t.next()).done)&&(o.push(e.value),!r||o.length!==r);i=!0);}catch(n){c=!0,a=n}finally{try{i||null==t.return||t.return()}finally{if(c)throw a}}return o}}(t,e)||function(n,t){if(n){if("string"==typeof n)return r(n,t);var e=Object.prototype.toString.call(n).slice(8,-1);return"Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e?Array.from(n):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?r(n,t):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=a[1],i=a[3];if(!i)return o;if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),A="/*# ".concat(s," */"),l=i.sources.map((function(n){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(n," */")}));return[o].concat(l).concat([A]).join("\n")}return[o].join("\n")}},379:function(n,r,t){"use strict";var e,a=function(){var n={};return function(r){if(void 0===n[r]){var t=document.querySelector(r);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}n[r]=t}return n[r]}}(),o=[];function i(n){for(var r=-1,t=0;t<o.length;t++)if(o[t].identifier===n){r=t;break}return r}function c(n,r){for(var t={},e=[],a=0;a<n.length;a++){var c=n[a],s=r.base?c[0]+r.base:c[0],A=t[s]||0,l="".concat(s," ").concat(A);t[s]=A+1;var u=i(l),d={css:c[1],media:c[2],sourceMap:c[3]};-1!==u?(o[u].references++,o[u].updater(d)):o.push({identifier:l,updater:m(d,r),references:1}),e.push(l)}return e}function s(n){var r=document.createElement("style"),e=n.attributes||{};if(void 0===e.nonce){var o=t.nc;o&&(e.nonce=o)}if(Object.keys(e).forEach((function(n){r.setAttribute(n,e[n])})),"function"==typeof n.insert)n.insert(r);else{var i=a(n.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(r)}return r}var A,l=(A=[],function(n,r){return A[n]=r,A.filter(Boolean).join("\n")});function u(n,r,t,e){var a=t?"":e.media?"@media ".concat(e.media," {").concat(e.css,"}"):e.css;if(n.styleSheet)n.styleSheet.cssText=l(r,a);else{var o=document.createTextNode(a),i=n.childNodes;i[r]&&n.removeChild(i[r]),i.length?n.insertBefore(o,i[r]):n.appendChild(o)}}function d(n,r,t){var e=t.css,a=t.media,o=t.sourceMap;if(a?n.setAttribute("media",a):n.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(e+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}var f=null,p=0;function m(n,r){var t,e,a;if(r.singleton){var o=p++;t=f||(f=s(r)),e=u.bind(null,t,o,!1),a=u.bind(null,t,o,!0)}else t=s(r),e=d.bind(null,t,r),a=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)};return e(n),function(r){if(r){if(r.css===n.css&&r.media===n.media&&r.sourceMap===n.sourceMap)return;e(n=r)}else a()}}n.exports=function(n,r){(r=r||{}).singleton||"boolean"==typeof r.singleton||(r.singleton=(void 0===e&&(e=Boolean(window&&document&&document.all&&!window.atob)),e));var t=c(n=n||[],r);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var e=0;e<t.length;e++){var a=i(t[e]);o[a].references--}for(var s=c(n,r),A=0;A<t.length;A++){var l=i(t[A]);0===o[l].references&&(o[l].updater(),o.splice(l,1))}t=s}}}}},r={};function t(e){var a=r[e];if(void 0!==a)return a.exports;var o=r[e]={id:e,exports:{}};return n[e](o,o.exports,t),o.exports}t.n=function(n){var r=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(r,{a:r}),r},t.d=function(n,r){for(var e in r)t.o(r,e)&&!t.o(n,e)&&Object.defineProperty(n,e,{enumerable:!0,get:r[e]})},t.o=function(n,r){return Object.prototype.hasOwnProperty.call(n,r)},t.nc=void 0,function(){"use strict";var n=t(379),r=t.n(n),e=t(738),a=(r()(e.Z,{insert:"head",singleton:!1}),e.Z.locals,t(496)),o=(r()(a.Z,{insert:"head",singleton:!1}),a.Z.locals,t(255),function n(r,t){var e,a=t.onNested,o=t.onReturn;return 1===r||0===r?e=1:(a(r-1),e=r*n(r-1,t)),o({n:r,result:e}),e}),i=function(){document.getElementById("calculationContainer").style.visibility="hidden"},c=function(){document.getElementById("calcFactBtn").removeAttribute("disabled")},s=function(){document.getElementById("calcFactBtn").setAttribute("disabled",!0)};!function(){s(),i();var n=document.getElementById("factorialInput"),r=document.getElementById("calcFactBtn");n.addEventListener("input",(function(n){n.target.value?c():s(),i()})),r.addEventListener("click",(function(){s(),document.getElementById("factorialInput").setAttribute("disabled",!0),function(){var n=document.querySelector("#factorialInput"),r=[],t=n.value,e=0;document.getElementById("factorialNumber").textContent="".concat(t,"!"),r.push({action:"nested",n:t}),document.getElementById("calculationContainer").style.visibility="visible",o(t,{onNested:function(n){r.push({action:"nested",n:n})},onReturn:function(n){var t=n.n,e=n.result;r.push.apply(r,[{action:"calculated",n:t,result:e},{action:"return",n:t,result:e}])}});var a=setInterval((function(){var n=r.shift();if(!n)return clearInterval(a),document.getElementById("factorialNumber").textContent+=" = ".concat(e),c(),void document.getElementById("factorialInput").removeAttribute("disabled");var t=document.querySelector(".fact-list");switch(n.action){case"nested":t.children.length&&(t.lastChild.textContent="calculating ".concat(n.n+1," x ").concat(n.n,"! 👇"));var o=document.createElement("DIV");o.textContent="calculating ".concat(n.n,"!"),o.classList.add("fact-list-item");var i="".concat(16*t.children.length,"px");o.style.marginLeft=i,o.style.marginRight=i,t.appendChild(o);break;case"calculated":if(t.children.length){var s=t.lastChild;s.textContent="Calculated ".concat(n.n," factorial. Result = ").concat(n.result,"  👆");var A="job_".concat(n.n);s.id=A,setTimeout((function(){s.style.animation="nested-item-disappear ".concat(500,"ms ease-in ").concat(0,"ms"),s.addEventListener("webkitAnimationEnd",(function(){s.remove()}))}),500)}break;case"return":t.children.length&&(t.lastChild.remove(),e=n.result)}}),1e3)}()}))}()}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,